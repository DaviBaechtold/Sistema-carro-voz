#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema de Assistente de Voz com Arduino como Microfone Remoto
Recebe √°udio do Arduino via WiFi/Serial e processa comandos de voz

Hardware: Google Dev Board (AA1) + Arduino Nano RP2040 Connect
Autor: Sistema Assistente de Voz para Carro
Vers√£o: 1.0
"""

import speech_recognition as sr
import pyttsx3
import time
import threading
import os
import re
import warnings
import sys
import socket
import serial
import numpy as np
import io
import wave
import tempfile
import struct
from datetime import datetime

# ===== CONFIGURA√á√ïES DO SISTEMA =====
USE_WIFI = True          # True = WiFi, False = Serial USB
WIFI_PORT = 5555         # Porta TCP para receber dados do Arduino
SERIAL_PORT = '/dev/ttyUSB0'  # Porta serial (ajustar conforme necess√°rio)
SERIAL_BAUD = 115200     # Velocidade serial
SAMPLE_RATE = 16000      # Taxa de amostragem (deve ser igual ao Arduino)
RECORD_SECONDS = 5       # Tempo de grava√ß√£o para cada comando
DEBUG = True             # Modo debug com mais informa√ß√µes

# Suprimir warnings do ALSA
warnings.filterwarnings("ignore")
os.environ['PYTHONWARNINGS'] = 'ignore'

class ArduinoMicrophone:
    """
    Classe para gerenciar a comunica√ß√£o com o Arduino
    Recebe dados de √°udio via WiFi ou Serial
    """
    
    def __init__(self, use_wifi=True):
        self.use_wifi = use_wifi
        self.buffer = bytearray()  # Buffer para armazenar √°udio recebido
        self.is_recording = False  # Flag de controle de grava√ß√£o
        self.connection_active = False
        self.debug = DEBUG
        
        # Estat√≠sticas
        self.bytes_received = 0
        self.last_data_time = time.time()
        
        if use_wifi:
            self._setup_wifi()
        else:
            self._setup_serial()
    
    def _setup_wifi(self):
        """Configura servidor TCP para receber dados do Arduino"""
        try:
            # Criar socket TCP
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            
            # Bind na porta especificada
            self.sock.bind(('0.0.0.0', WIFI_PORT))
            self.sock.listen(1)
            
            print(f"üì° Servidor TCP iniciado na porta {WIFI_PORT}")
            print("‚è≥ Aguardando conex√£o do Arduino...")
            
            # Aceitar conex√£o (bloqueia at√© Arduino conectar)
            self.conn, self.addr = self.sock.accept()
            print(f"‚úÖ Arduino conectado de {self.addr[0]}:{self.addr[1]}")
            
            # Aguardar mensagem de identifica√ß√£o
            self.conn.settimeout(5.0)
            try:
                ident = self.conn.recv(1024).decode().strip()
                if "ARDUINO_MIC_READY" in ident:
                    print("‚úÖ Arduino identificado corretamente")
                    self.connection_active = True
            except:
                print("‚ö†Ô∏è Arduino conectado mas n√£o identificado")
                self.connection_active = True
            
            # Remover timeout para opera√ß√£o normal
            self.conn.settimeout(None)
            
        except Exception as e:
            print(f"‚ùå Erro ao configurar WiFi: {e}")
            raise
    
    def _setup_serial(self):
        """Configura comunica√ß√£o serial com Arduino"""
        try:
            print(f"üîå Conectando na porta serial {SERIAL_PORT}...")
            self.ser = serial.Serial(SERIAL_PORT, SERIAL_BAUD, timeout=0.1)
            
            # Limpar buffer inicial
            self.ser.reset_input_buffer()
            time.sleep(2)  # Aguardar Arduino reiniciar
            
            print(f"‚úÖ Serial conectada em {SERIAL_PORT} @ {SERIAL_BAUD} baud")
            self.connection_active = True
            
        except Exception as e:
            print(f"‚ùå Erro ao configurar Serial: {e}")
            print("üí° Dica: Verifique se a porta est√° correta com 'ls /dev/tty*'")
            raise
    
    def start_recording(self):
        """Inicia grava√ß√£o de √°udio"""
        self.buffer.clear()
        self.bytes_received = 0
        self.is_recording = True
        self.last_data_time = time.time()
        
        if self.debug:
            print(f"üî¥ Grava√ß√£o iniciada ({datetime.now().strftime('%H:%M:%S')})")
    
    def stop_recording(self):
        """
        Para grava√ß√£o e converte buffer em AudioData
        Retorna objeto sr.AudioData para reconhecimento
        """
        self.is_recording = False
        time.sleep(0.2)  # Aguardar √∫ltimos dados
        
        if self.debug:
            print(f"‚èπÔ∏è Grava√ß√£o parada. Total: {len(self.buffer)} bytes")
        
        if len(self.buffer) == 0:
            print("‚ö†Ô∏è Nenhum dado de √°udio recebido!")
            return None
        
        try:
            # Converter buffer para array numpy (16-bit signed)
            audio_data = np.frombuffer(self.buffer, dtype=np.int16)
            
            # Verificar se h√° √°udio v√°lido
            if np.max(np.abs(audio_data)) < 100:
                print("‚ö†Ô∏è √Åudio muito baixo ou silencioso")
            
            # Normalizar √°udio se necess√°rio
            max_val = np.max(np.abs(audio_data))
            if max_val > 0:
                # Normalizar para 80% do range m√°ximo
                audio_data = (audio_data * (32767 * 0.8 / max_val)).astype(np.int16)
            
            # Criar arquivo WAV tempor√°rio
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmp_file:
                temp_filename = tmp_file.name
                
                # Escrever WAV
                with wave.open(temp_filename, 'wb') as wav_file:
                    wav_file.setnchannels(1)  # Mono
                    wav_file.setsampwidth(2)  # 16 bits
                    wav_file.setframerate(SAMPLE_RATE)
                    wav_file.writeframes(audio_data.tobytes())
                
                if self.debug:
                    duration = len(audio_data) / SAMPLE_RATE
                    print(f"üìä √Åudio: {duration:.1f}s, {max_val} amplitude m√°x")
                
                # Converter para sr.AudioData
                with sr.AudioFile(temp_filename) as source:
                    audio = sr.Recognizer().record(source)
                
                # Limpar arquivo tempor√°rio
                os.unlink(temp_filename)
                
                return audio
                
        except Exception as e:
            print(f"‚ùå Erro ao processar √°udio: {e}")
            return None
    
    def receive_loop(self):
        """
        Loop principal para receber dados continuamente
        Deve rodar em thread separada
        """
        print("üîÑ Loop de recep√ß√£o iniciado")
        
        while self.connection_active:
            try:
                data = None
                
                if self.use_wifi:
                    # Receber via TCP
                    try:
                        data = self.conn.recv(4096)  # Buffer maior para efici√™ncia
                        if not data:
                            # Conex√£o fechada
                            print("‚ö†Ô∏è Conex√£o WiFi perdida")
                            self.connection_active = False
                            break
                    except socket.timeout:
                        continue
                else:
                    # Receber via Serial
                    if self.ser.in_waiting > 0:
                        data = self.ser.read(self.ser.in_waiting)
                    else:
                        time.sleep(0.001)  # Pequena pausa para n√£o usar 100% CPU
                        continue
                
                # Processar dados recebidos
                if data and self.is_recording:
                    self.buffer.extend(data)
                    self.bytes_received += len(data)
                    self.last_data_time = time.time()
                    
                    # Debug: mostrar progresso a cada 16KB
                    if self.debug and self.bytes_received % 16384 == 0:
                        print(f"üì¶ Recebido: {self.bytes_received // 1024}KB")
                
            except Exception as e:
                print(f"‚ùå Erro no loop de recep√ß√£o: {e}")
                if self.use_wifi:
                    self.connection_active = False
                    break
                else:
                    # Para serial, tentar continuar
                    time.sleep(1)
        
        print("üî¥ Loop de recep√ß√£o encerrado")
    
    def check_connection(self):
        """Verifica se a conex√£o est√° ativa"""
        if not self.connection_active:
            return False
        
        # Verificar timeout de dados
        if self.is_recording and (time.time() - self.last_data_time) > 5:
            print("‚ö†Ô∏è Timeout: Nenhum dado recebido h√° 5 segundos")
            return False
        
        return True
    
    def close(self):
        """Fecha conex√µes"""
        self.connection_active = False
        
        try:
            if self.use_wifi:
                self.conn.close()
                self.sock.close()
            else:
                self.ser.close()
        except:
            pass

class VoiceAssistant:
    """
    Assistente de voz principal
    Processa comandos e executa a√ß√µes
    """
    
    def __init__(self):
        print("\nüöó Inicializando Assistente de Voz com Arduino...")
        
        # Wake words aceitas
        self.wake_words = ['ok google', 'hey google', 'assistente', 'carro']
        
        # Inicializar comunica√ß√£o com Arduino
        self.arduino_mic = ArduinoMicrophone(use_wifi=USE_WIFI)
        
        # Thread para receber dados do Arduino
        self.receive_thread = threading.Thread(target=self.arduino_mic.receive_loop)
        self.receive_thread.daemon = True
        self.receive_thread.start()
        
        # Configurar reconhecimento de voz
        self.recognizer = sr.Recognizer()
        self.recognizer.energy_threshold = 300  # Ajustar sensibilidade
        self.recognizer.dynamic_energy_threshold = True
        
        # Configurar s√≠ntese de voz
        self.tts = pyttsx3.init()
        self.setup_tts()
        
        # Mapear comandos para fun√ß√µes
        self.commands = {
            # Chamadas
            'ligar para': self.make_call,
            'atender': self.answer_call,
            'desligar chamada': self.end_call,
            'discagem': self.speed_dial,
            
            # M√∫sica
            'tocar m√∫sica': self.play_music,
            'tocar': self.play_specific,
            'aumentar volume': self.volume_up,
            'diminuir volume': self.volume_down,
            'pr√≥xima': self.next_track,
            'anterior': self.previous_track,
            'pausar': self.pause_music,
            'continuar': self.resume_music,
            
            # Navega√ß√£o
            'navegar para': self.navigate_to,
            'rotas alternativas': self.alternative_routes,
            'onde estou': self.current_location,
            'cancelar rota': self.cancel_route,
            'tempo at√©': self.time_to_destination,
            
            # Mensagens
            'enviar mensagem': self.send_message,
            '√∫ltima mensagem': self.read_last_message,
            'ler mensagem': self.read_message,
            
            # Sistema
            'ajuda': self.help,
            'status': self.status,
            'que horas s√£o': self.current_time,
            'data de hoje': self.current_date
        }
        
        self.is_listening = False
        
    def setup_tts(self):
        """Configura voz do sistema TTS"""
        voices = self.tts.getProperty('voices')
        
        # Procurar voz em portugu√™s
        pt_voice = None
        for voice in voices:
            voice_name = voice.name.lower()
            # Procurar palavras-chave de portugu√™s
            if any(keyword in voice_name for keyword in ['brazil', 'brasil', 'pt', 'portuguese']):
                pt_voice = voice.id
                print(f"üîä Voz PT-BR encontrada: {voice.name}")
                break
        
        if pt_voice:
            self.tts.setProperty('voice', pt_voice)
        else:
            print("‚ö†Ô∏è Voz PT-BR n√£o encontrada, usando padr√£o")
        
        # Ajustar propriedades da voz
        self.tts.setProperty('rate', 160)     # Velocidade (palavras/minuto)
        self.tts.setProperty('volume', 0.85)  # Volume (0.0 a 1.0)
    
    def speak(self, text):
        """Sintetiza e fala o texto"""
        print(f"üîä Assistente: {text}")
        
        try:
            self.tts.say(text)
            self.tts.runAndWait()
        except Exception as e:
            print(f"‚ùå Erro ao falar: {e}")
    
    def listen_for_wake_word_and_command(self):
        """
        Escuta por wake word + comando via Arduino
        Retorna o comando sem a wake word ou None
        """
        try:
            # Verificar conex√£o
            if not self.arduino_mic.check_connection():
                print("‚ùå Conex√£o com Arduino perdida!")
                return None
            
            print("\nüëÇ Escutando... (fale ap√≥s o bipe)")
            
            # Som de feedback (opcional)
            # self.speak("bip")  # Ou usar outro m√©todo de feedback
            
            # Gravar √°udio por X segundos
            self.arduino_mic.start_recording()
            time.sleep(RECORD_SECONDS)
            audio = self.arduino_mic.stop_recording()
            
            if audio is None:
                return None
            
            # Reconhecer fala
            print("üß† Processando √°udio...")
            
            try:
                # Usar Google Speech Recognition
                full_command = self.recognizer.recognize_google(
                    audio, 
                    language='pt-BR',
                    show_all=False  # Retornar apenas melhor resultado
                )
                
                print(f"üìù Voc√™ disse: '{full_command}'")
                
                # Converter para min√∫sculas para compara√ß√£o
                full_command_lower = full_command.lower()
                
                # Procurar wake word
                wake_word_found = None
                wake_word_position = -1
                
                for wake_word in self.wake_words:
                    if wake_word in full_command_lower:
                        wake_word_found = wake_word
                        wake_word_position = full_command_lower.find(wake_word)
                        break
                
                if wake_word_found:
                    # Extrair comando ap√≥s wake word
                    command_start = wake_word_position + len(wake_word_found)
                    command = full_command_lower[command_start:].strip()
                    
                    # Limpar pontua√ß√£o inicial
                    command = re.sub(r'^[,.\s]+', '', command)
                    
                    print(f"‚úÖ Wake word: '{wake_word_found}' | Comando: '{command}'")
                    return command if command else None
                else:
                    print("‚ö†Ô∏è Nenhuma wake word detectada")
                    return None
                    
            except sr.UnknownValueError:
                print("‚ùì N√£o foi poss√≠vel entender o √°udio")
                return None
            except sr.RequestError as e:
                print(f"‚ùå Erro no servi√ßo de reconhecimento: {e}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erro ao escutar: {e}")
            return None
    
    def process_command(self, command):
        """
        Processa o comando e executa a a√ß√£o correspondente
        """
        if not command:
            return
        
        print(f"‚öôÔ∏è Processando comando: '{command}'")
        
        # Procurar comando no dicion√°rio
        command_found = False
        
        for keyword, action in self.commands.items():
            if keyword in command:
                command_found = True
                
                # Comandos que precisam de par√¢metros
                if keyword in ['ligar para', 'tocar', 'navegar para', 
                             'enviar mensagem', 'discagem', 'tempo at√©']:
                    action(command)
                else:
                    action()
                
                break
        
        if not command_found:
            self.speak("Desculpe, n√£o entendi o comando. Diga 'ajuda' para ver os comandos dispon√≠veis.")
    
    # ===== COMANDOS DE CHAMADAS =====
    
    def make_call(self, command):
        """Fazer liga√ß√£o"""
        # Extrair nome do contato
        contact = command.replace('ligar para', '').strip()
        
        if contact:
            self.speak(f"Ligando para {contact}")
            # Aqui entraria integra√ß√£o com sistema de telefone do carro
        else:
            self.speak("Para quem voc√™ quer ligar?")
    
    def answer_call(self):
        """Atender chamada"""
        self.speak("Atendendo chamada")
        # Integra√ß√£o com sistema do carro
    
    def end_call(self):
        """Encerrar chamada"""
        self.speak("Chamada encerrada")
        # Integra√ß√£o com sistema do carro
    
    def speed_dial(self, command):
        """Discagem r√°pida"""
        # Extrair n√∫meros do comando
        numbers = re.findall(r'\d+', command)
        
        if numbers:
            number = ''.join(numbers)
            self.speak(f"Discando {' '.join(number)}")  # Falar d√≠gito por d√≠gito
        else:
            self.speak("Qual n√∫mero voc√™ quer discar?")
    
    # ===== COMANDOS DE M√öSICA =====
    
    def play_music(self):
        """Tocar m√∫sica"""
        self.speak("Reproduzindo suas m√∫sicas")
        # Integra√ß√£o com player de m√∫sica
    
    def play_specific(self, command):
        """Tocar m√∫sica/artista espec√≠fico"""
        # Remover 'tocar' do comando
        content = command.replace('tocar', '').strip()
        
        if content:
            self.speak(f"Tocando {content}")
            # Integra√ß√£o com player
        else:
            self.speak("O que voc√™ quer ouvir?")
    
    def volume_up(self):
        """Aumentar volume"""
        self.speak("Aumentando o volume")
        # Integra√ß√£o com sistema de √°udio
    
    def volume_down(self):
        """Diminuir volume"""
        self.speak("Diminuindo o volume")
        # Integra√ß√£o com sistema de √°udio
    
    def next_track(self):
        """Pr√≥xima m√∫sica"""
        self.speak("Pr√≥xima m√∫sica")
        # Integra√ß√£o com player
    
    def previous_track(self):
        """M√∫sica anterior"""
        self.speak("M√∫sica anterior")
        # Integra√ß√£o com player
    
    def pause_music(self):
        """Pausar m√∫sica"""
        self.speak("M√∫sica pausada")
        # Integra√ß√£o com player
    
    def resume_music(self):
        """Continuar m√∫sica"""
        self.speak("Continuando a reprodu√ß√£o")
        # Integra√ß√£o com player
    
    # ===== COMANDOS DE NAVEGA√á√ÉO =====
    
    def navigate_to(self, command):
        """Navegar para destino"""
        destination = command.replace('navegar para', '').strip()
        
        if destination:
            self.speak(f"Calculando rota para {destination}")
            # Integra√ß√£o com GPS
        else:
            self.speak("Para onde voc√™ quer ir?")
    
    def alternative_routes(self):
        """Mostrar rotas alternativas"""
        self.speak("Procurando rotas alternativas")
        # Integra√ß√£o com GPS
    
    def current_location(self):
        """Localiza√ß√£o atual"""
        # Exemplo de resposta
        self.speak("Voc√™ est√° na Avenida Paulista, pr√≥ximo ao n√∫mero 1500")
        # Integra√ß√£o com GPS para localiza√ß√£o real
    
    def cancel_route(self):
        """Cancelar navega√ß√£o"""
        self.speak("Navega√ß√£o cancelada")
        # Integra√ß√£o com GPS
    
    def time_to_destination(self, command):
        """Tempo at√© destino"""
        # Exemplo de resposta
        self.speak("Tempo estimado de chegada: 15 minutos")
        # Integra√ß√£o com GPS
    
    # ===== COMANDOS DE MENSAGENS =====
    
    def send_message(self, command):
        """Enviar mensagem"""
        # Extrair destinat√°rio
        parts = command.replace('enviar mensagem para', '').strip()
        
        if parts:
            self.speak(f"Preparando mensagem para {parts}. O que voc√™ quer dizer?")
            # Aqui entraria um novo listen para capturar a mensagem
        else:
            self.speak("Para quem voc√™ quer enviar a mensagem?")
    
    def read_last_message(self):
        """Ler √∫ltima mensagem"""
        # Exemplo de mensagem
        self.speak("√öltima mensagem de Maria: Estou chegando em 10 minutos")
        # Integra√ß√£o com sistema de mensagens
    
    def read_message(self):
        """Ler mensagens n√£o lidas"""
        # Exemplo
        self.speak("Voc√™ tem 3 mensagens n√£o lidas. Quer que eu leia?")
        # Integra√ß√£o com sistema de mensagens
    
    # ===== COMANDOS DO SISTEMA =====
    
    def status(self):
        """Status do sistema"""
        status_msg = "Sistema funcionando normalmente. "
        
        # Verificar conex√£o Arduino
        if self.arduino_mic.check_connection():
            status_msg += "Arduino conectado. "
        else:
            status_msg += "Arduino desconectado. "
        
        # Adicionar mais informa√ß√µes de status
        status_msg += f"Modo: {'WiFi' if USE_WIFI else 'Serial'}."
        
        self.speak(status_msg)
    
    def current_time(self):
        """Hora atual"""
        now = datetime.now()
        hour = now.strftime("%H")
        minute = now.strftime("%M")
        self.speak(f"S√£o {hour} horas e {minute} minutos")
    
    def current_date(self):
        """Data atual"""
        now = datetime.now()
        # Formato brasileiro
        date_str = now.strftime("%d de %B de %Y")
        # Traduzir m√™s para portugu√™s
        months = {
            'January': 'janeiro', 'February': 'fevereiro', 'March': 'mar√ßo',
            'April': 'abril', 'May': 'maio', 'June': 'junho',
            'July': 'julho', 'August': 'agosto', 'September': 'setembro',
            'October': 'outubro', 'November': 'novembro', 'December': 'dezembro'
        }
        for en, pt in months.items():
            date_str = date_str.replace(en, pt)
        
        self.speak(f"Hoje √© {date_str}")
    
    def help(self):
        """Lista comandos dispon√≠veis"""
        help_text = """
        Comandos dispon√≠veis:
        
        Para chamadas: ligar para algu√©m, atender, desligar chamada.
        Para m√∫sica: tocar m√∫sica, aumentar ou diminuir volume, pr√≥xima, anterior.
        Para navega√ß√£o: navegar para destino, onde estou, cancelar rota.
        Para mensagens: enviar mensagem, ler √∫ltima mensagem.
        
        Sempre comece com uma wake word como 'Assistente' ou 'OK Google'.
        """
        
        self.speak(help_text)
    
    def start_listening(self):
        """
        Loop principal do assistente
        Fica escutando por comandos continuamente
        """
        # Mensagem de boas-vindas
        self.speak("Assistente de voz com Arduino iniciado. Diga 'Assistente ajuda' para ver os comandos.")
        
        self.is_listening = True
        consecutive_errors = 0
        
        while self.is_listening:
            try:
                # Indicador visual/sonoro de que est√° pronto
                print("\n" + "="*50)
                print("üëÇ Pronto para comandos...")
                print("üí° Exemplo: 'Assistente, tocar m√∫sica'")
                print("="*50)
                
                # Escutar por comando
                command = self.listen_for_wake_word_and_command()
                
                if command:
                    # Reset contador de erros
                    consecutive_errors = 0
                    
                    # Processar comando
                    self.process_command(command)
                    
                    # Verificar comandos de sa√≠da
                    exit_words = ['tchau', 'at√© logo', 'parar assistente', 
                                 'encerrar', 'desligar assistente']
                    if any(word in command for word in exit_words):
                        self.speak("At√© logo! Encerrando assistente.")
                        break
                else:
                    # N√£o detectou comando v√°lido
                    consecutive_errors += 1
                    
                    # Se muitos erros consecutivos, verificar conex√£o
                    if consecutive_errors > 5:
                        print("‚ö†Ô∏è Muitos erros consecutivos, verificando sistema...")
                        self.status()
                        consecutive_errors = 0
                
                # Pequena pausa entre comandos
                time.sleep(0.5)
                
            except KeyboardInterrupt:
                print("\n‚õî Interrompido pelo usu√°rio")
                self.speak("Encerrando assistente")
                break
                
            except Exception as e:
                print(f"‚ùå Erro no loop principal: {e}")
                consecutive_errors += 1
                
                if consecutive_errors > 10:
                    self.speak("Muitos erros detectados. Reinicie o sistema.")
                    break
                
                time.sleep(2)
        
        # Limpeza ao sair
        self.cleanup()
    
    def cleanup(self):
        """Limpa recursos ao encerrar"""
        print("\nüßπ Limpando recursos...")
        
        try:
            self.arduino_mic.close()
            self.tts.stop()
        except:
            pass
        
        print("‚úÖ Assistente encerrado")

def test_connection():
    """Fun√ß√£o para testar conex√£o com Arduino"""
    print("\nüß™ Teste de Conex√£o com Arduino")
    print("="*50)
    
    try:
        # Tentar criar conex√£o
        arduino = ArduinoMicrophone(use_wifi=USE_WIFI)
        
        print("‚úÖ Conex√£o estabelecida!")
        print(f"Modo: {'WiFi' if USE_WIFI else 'Serial'}")
        
        # Testar recep√ß√£o de dados
        print("\nüì° Testando recep√ß√£o de dados por 3 segundos...")
        
        receive_thread = threading.Thread(target=arduino.receive_loop)
        receive_thread.daemon = True
        receive_thread.start()
        
        arduino.start_recording()
        time.sleep(3)
        arduino.stop_recording()
        
        if arduino.bytes_received > 0:
            print(f"‚úÖ Dados recebidos: {arduino.bytes_received} bytes")
        else:
            print("‚ùå Nenhum dado recebido do Arduino")
            print("Verifique se o Arduino est√° enviando dados")
        
        arduino.close()
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")

# ===== PONTO DE ENTRADA =====
if __name__ == "__main__":
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë   Assistente de Voz com Arduino Microfone    ‚ïë
    ‚ïë          Google Dev Board (AA1)               ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    print(f"üì° Modo: {'WiFi' if USE_WIFI else 'Serial'}")
    print(f"üé§ Taxa de amostragem: {SAMPLE_RATE} Hz")
    print(f"‚è±Ô∏è Tempo de grava√ß√£o: {RECORD_SECONDS} segundos")
    
    # Verificar argumentos de linha de comando
    if len(sys.argv) > 1:
        if sys.argv[1] == '--test':
            test_connection()
            sys.exit(0)
        elif sys.argv[1] == '--help':
            print("\nUso: python3 voice_assistant_arduino.py [op√ß√µes]")
            print("Op√ß√µes:")
            print("  --test    Testar conex√£o com Arduino")
            print("  --help    Mostrar esta ajuda")
            sys.exit(0)
    
    try:
        # Criar e iniciar assistente
        assistant = VoiceAssistant()
        assistant.start_listening()
        
    except KeyboardInterrupt:
        print("\n‚õî Programa interrompido")
        
    except Exception as e:
        print(f"\n‚ùå Erro fatal: {e}")
        print("üí° Dicas:")
        print("  - Verifique se o Arduino est√° conectado e rodando")
        print("  - Para WiFi: Confirme IP e porta")
        print("  - Para Serial: Confirme porta USB")
        print("  - Execute com --test para diagnosticar")